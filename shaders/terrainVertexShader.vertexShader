#version 400

layout (location = 0) in vec3 vPosition_MS_in;		// MS = ModelSpace
layout (location = 1) in vec3 vTexCoord_Grid_in;	// texcoord inside the grid

uniform vec2 camTexCoord_Terrain;
uniform vec3 camPosition_WS;	// WS = WorldSpace

uniform float gridFraction;
uniform int nrQuads;

out vec3 vPosition_WS;
out vec2 vTexCoord_Terrain;



void main() {
	vTexCoord_Terrain = camTexCoord_Terrain + gridFraction * vTexCoord_Grid_in.xy;
	float quadLengthTex = 1 * gridFraction / nrQuads;

	float restX = mod(vTexCoord_Terrain.x, quadLengthTex);
	float restY = mod(vTexCoord_Terrain.y, quadLengthTex);

	if (restX >= quadLengthTex / 2) {
		vTexCoord_Terrain.x += quadLengthTex - restX;
	} else {
		vTexCoord_Terrain.x -= restX;
	}		

	if (restY >= quadLengthTex / 2) {
		vTexCoord_Terrain.y += quadLengthTex - restY;
	} else {
		vTexCoord_Terrain.y -= restY;
	}		

	// no model matrix: terrain cannot be moved or rotated
	vPosition_WS = vPosition_MS_in + vec3(camPosition_WS.x, 0, camPosition_WS.z);

	vPosition_WS.x = round(vPosition_WS.x);
	vPosition_WS.z = round(vPosition_WS.z);








	// quadLength quals 1, so I can just take the fractional part of the position
/*	float intPart;
	restX = modf(vPosition_WS.x, intPart);
	float restZ = modf(vPosition_WS.z, intPart);

	if (restX >= 1 / 2) {
		vPosition_WS.x += 1 - restX;
	} else if (restX >= 0) {
		vPosition_WS.x -= restX;
	} else if (restX <= - 1 / 2) {
		vPosition_WS.x -= 1 + restX;
	} else {
		vPosition_WS.x -= restX;
	}
	
	if (restZ >= 1 / 2) {
		vPosition_WS.z -= 1 - restZ;
	} else if (restZ >= 0) {
		vPosition_WS.z += restZ;
	} else if (restZ <= -1/2) {
		vPosition_WS.z += 1 + restZ;
	} else {
		vPosition_WS.z += restZ;
	}
*/
}



