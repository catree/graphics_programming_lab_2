#version 400

layout (vertices = 4) out;

in vec3 positionWorldSpace[];
in vec2 texCoord[];
out vec2 texCoord2[];
out vec3 positionWorldSpace2[];

uniform vec3 cameraPosition;

void main() 
{

	vec3 bottom = mix(positionWorldSpace[0], positionWorldSpace[1], 0.5);
	vec3 top = mix(positionWorldSpace[3], positionWorldSpace[2], 0.5);
	vec3 center = mix(bottom, top, 0.5);

	float distanceToCamera = distance(cameraPosition, center);

	
	int tessLevel = 1;
	if (gl_InvocationID == 0)
    	{
		if (distanceToCamera < 7) {
			tessLevel = 16;
		} else if (distanceToCamera < 20) {
			tessLevel = 8;
		} else if (distanceToCamera < 40) {
			tessLevel = 2;
		} else {
			tessLevel = 1;
		}
		
		gl_TessLevelInner[0] = tessLevel;
		gl_TessLevelInner[1] = tessLevel;
		gl_TessLevelOuter[0] = tessLevel;
		gl_TessLevelOuter[1] = tessLevel;
		gl_TessLevelOuter[2] = tessLevel;
		gl_TessLevelOuter[3] = tessLevel;

   	}

        gl_out[gl_InvocationID].gl_Position =
        gl_in[gl_InvocationID].gl_Position;

	positionWorldSpace2[gl_InvocationID] = positionWorldSpace[gl_InvocationID];
	texCoord2[gl_InvocationID] = texCoord[gl_InvocationID];

}
