#version 400

layout (vertices = 4) out;

in vec3 vPosition_WS[];
in vec2 vTexCoord_Terrain[];

out vec3 tPosition_WS[];
out vec2 tTexCoord_Terrain[];
out float tTesselation[];
out float tMipLevel[];
out int cornerTesselated[];
patch out float baseMipLevel;
//patch out int seam[4];

uniform vec3 camPosition_WS;
uniform float gridFraction;
uniform int nrQuads;
uniform int verticalScaling;
uniform sampler2D heightMap;

float getTesselationFromDistance(float distanceToCamera) {
	int texelPerQuadLevel0 = int(round(4096 * gridFraction / nrQuads));
	return max(1, min(64, pow(2, round(log2(texelPerQuadLevel0 / (1 * distanceToCamera))))));
}

// tesselation should always be a power of 2, max. 64
float getMipFromTesselation(float tesselation) {
	return (6 - log2(tesselation));
}

void main() 
{
	vec3 pos = (vPosition_WS[0] + vPosition_WS[1] + vPosition_WS[2] + vPosition_WS[3]) / 4;
	vec2 tex = (vTexCoord_Terrain[0] + vTexCoord_Terrain[1] + vTexCoord_Terrain[2] + vTexCoord_Terrain[3]) / 4;

	
	float halfQuadLength = 0.5;

	// neighbours:
	// | 7 | 3 | 6 |
	// | 0 | x | 2 |
	// | 4 | 1 | 5 |

	vec3 posNeighbours[8];	
	posNeighbours[0] = (vPosition_WS[0] + vPosition_WS[3]) / 2 + vec3(-halfQuadLength, 0, 0);
	posNeighbours[1] = (vPosition_WS[0] + vPosition_WS[1]) / 2 + vec3(0, 0, halfQuadLength); 
	posNeighbours[2] = (vPosition_WS[1] + vPosition_WS[2]) / 2 + vec3(halfQuadLength, 0, 0);
	posNeighbours[3] = (vPosition_WS[2] + vPosition_WS[3]) / 2 + vec3(0, 0, -halfQuadLength);
	
	posNeighbours[4] = vPosition_WS[0] + vec3(-halfQuadLength, 0, halfQuadLength);  
	posNeighbours[5] = vPosition_WS[1] + vec3(halfQuadLength, 0, halfQuadLength);
	posNeighbours[6] = vPosition_WS[2] + vec3(halfQuadLength, 0, -halfQuadLength);
	posNeighbours[7] = vPosition_WS[3] + vec3(-halfQuadLength, 0, -halfQuadLength);

	float halfQuadLengthTex = 1 * gridFraction / nrQuads / 2;

	vec2 texNeighbours[8];	
	texNeighbours[0] = (vTexCoord_Terrain[0] + vTexCoord_Terrain[3]) / 2 + vec2(-halfQuadLengthTex, 0); 
	texNeighbours[1] = (vTexCoord_Terrain[0] + vTexCoord_Terrain[1]) / 2 + vec2(0, -halfQuadLengthTex);
	texNeighbours[2] = (vTexCoord_Terrain[1] + vTexCoord_Terrain[2]) / 2 + vec2(halfQuadLengthTex, 0);
	texNeighbours[3] = (vTexCoord_Terrain[2] + vTexCoord_Terrain[3]) / 2 + vec2(0, halfQuadLengthTex);

	texNeighbours[4] = vTexCoord_Terrain[0] + vec2(-halfQuadLengthTex, -halfQuadLengthTex); 
	texNeighbours[5] = vTexCoord_Terrain[1] + vec2(halfQuadLengthTex, -halfQuadLengthTex); 
	texNeighbours[6] = vTexCoord_Terrain[2] + vec2(halfQuadLengthTex, halfQuadLengthTex); 
	texNeighbours[7] = vTexCoord_Terrain[3] + vec2(-halfQuadLengthTex, halfQuadLengthTex); 


	float distanceToCamera;
	float tessNeighbours[8];

	for (int i = 0; i < 8; i++) {
		distanceToCamera = distance(camPosition_WS, posNeighbours[i]);
		tessNeighbours[i] = getTesselationFromDistance(distanceToCamera);
	}


	/* need to chose some intermediate mip level, as there is circular dependency
	 * between determining distanceToCamera and mipLevel. */

	float height_01 = textureLod(heightMap, tex, 3).x;
	vec3 posWithHeight = pos + vec3(0, height_01 * verticalScaling, 0);

	distanceToCamera = distance(camPosition_WS, pos); // posWithHeight
	float tesselation = getTesselationFromDistance(distanceToCamera);
	baseMipLevel = getMipFromTesselation(tesselation);

	if (gl_InvocationID == 0)
    	{		
		gl_TessLevelInner[0] = tesselation;
		gl_TessLevelInner[1] = tesselation;
   	}

	//seam[gl_InvocationID] = 0;
	tMipLevel[gl_InvocationID] = baseMipLevel;
	gl_TessLevelOuter[gl_InvocationID] = tesselation;
	cornerTesselated[gl_InvocationID] = 0;

	if (tessNeighbours[gl_InvocationID] > tesselation) {
		gl_TessLevelOuter[gl_InvocationID] = 2 * tesselation;
		tMipLevel[gl_InvocationID] = getMipFromTesselation(2 * tesselation);
	}

	// check corner tesselation
	if (tessNeighbours[gl_InvocationID + 4] > tesselation) {
		//seam[gl_InvocationID] = 1;
		cornerTesselated[gl_InvocationID] = 1;
	}





	tTesselation[gl_InvocationID] = tesselation;
	tPosition_WS[gl_InvocationID] = vPosition_WS[gl_InvocationID];
	tTexCoord_Terrain[gl_InvocationID] = vTexCoord_Terrain[gl_InvocationID];

}
