#version 400

layout (quads, equal_spacing) in;

in vec2 tTexCoord_Terrain[];
in vec3 tPosition_WS[];
in float tTesselation[];	// same for all 4 corner vertices
in float tMipLevel[];
in int cornerTesselated[];		
//patch in int seam[4];
patch in float baseMipLevel;

out vec2 fTexCoord_Terrain;
out vec3 fNormal_WS;
out vec3 fLightRay_WS;
out vec3 fViewRay_WS;
out float fHeight_01;
out vec3 debug;

//patch in float gl_TessLevelOuter[4];

uniform mat4 viewProjectionMatrix;

uniform vec3 camPosition_WS;
// 0 = position, 1 = ambient, 2 = diffuse, 3 = specular
uniform vec4 light0[4];

uniform float gridFraction;
uniform int verticalScaling;
uniform int nrQuads;

uniform sampler2D heightMap;


void main()
{
	// interpolate position
	vec3 pos1 = mix(tPosition_WS[0], tPosition_WS[1], gl_TessCoord.x);
	vec3 pos2 = mix(tPosition_WS[3], tPosition_WS[2], gl_TessCoord.x);
	vec3 pos_WS = mix(pos1, pos2, gl_TessCoord.y);

	// interpolate texture coordinate
	vec2 tex1 = mix(tTexCoord_Terrain[0], tTexCoord_Terrain[1], gl_TessCoord.x);
	vec2 tex2 = mix(tTexCoord_Terrain[3], tTexCoord_Terrain[2], gl_TessCoord.x);
	fTexCoord_Terrain = mix(tex1, tex2, gl_TessCoord.y);

	float myMipLevel = baseMipLevel;

	// determine to which edge the vertex belongs
	if (gl_TessCoord.x  == 0) {	// left edge
		myMipLevel = tMipLevel[0];
		if (gl_TessCoord.y == 0) {	// left, lower corner
			if (cornerTesselated[0] == 1) {
				myMipLevel = baseMipLevel - 1;
			} else {
				myMipLevel = min(myMipLevel, tMipLevel[1]);
			}
		}
		if (gl_TessCoord.y == 1) {	// left, upper corner
			if (cornerTesselated[3] == 1) {
				myMipLevel = baseMipLevel - 1;
			} else {
				myMipLevel = min(myMipLevel, tMipLevel[3]);
			}
		}
	} else if (gl_TessCoord.y == 0) {	// bottom edge
		myMipLevel = tMipLevel[1];
		if (gl_TessCoord.x == 1) {	// right, lower corner
			if (cornerTesselated[1] == 1) {
				myMipLevel = baseMipLevel - 1;
			} else {
				myMipLevel = min(myMipLevel, tMipLevel[2]);
			}
		}
 	} else if (gl_TessCoord.x == 1) {	// right edge
		myMipLevel = tMipLevel[2];
		if (gl_TessCoord.y == 1) {	// right, upper corner
			if (cornerTesselated[2] == 1) {
				myMipLevel = baseMipLevel - 1;
			} else {
				myMipLevel = min(myMipLevel, tMipLevel[3]);
			}
		}
	} else if (gl_TessCoord.y == 1) {				// top edge
		myMipLevel = tMipLevel[3];
	}

	if (myMipLevel > 5) myMipLevel = 5;

	fHeight_01 = textureLod(heightMap, fTexCoord_Terrain, myMipLevel).x;

	pos_WS += vec3(0, fHeight_01 * verticalScaling, 0);

	debug.y = tMipLevel[0];

	debug.x = 0;
	debug.y = 0;
	debug.z = 0;

	if (myMipLevel == 4) {
		debug.x = 1;
	} else if (myMipLevel == 5) {
		debug.y = 1;
	} else if (myMipLevel == 3) {
		debug.z = 1;
	}


	debug.x = tTesselation[0];

	// compute normal of this vertex
	
	float stepSizeTex = 1 * gridFraction / nrQuads / tTesselation[0];
	float stepSizeWorld = 1 / tTesselation[0];

	float hRight_scaled = textureLod(heightMap, vec2(fTexCoord_Terrain.x + stepSizeTex, fTexCoord_Terrain.y), baseMipLevel).x * verticalScaling;
	float hTop_scaled = textureLod(heightMap, vec2(fTexCoord_Terrain.x, fTexCoord_Terrain.y + stepSizeTex), baseMipLevel).x * verticalScaling;

	vec3 toRight = vec3(stepSizeWorld, hRight_scaled - pos_WS.y, 0);
	vec3 toTop = vec3(0, hTop_scaled - pos_WS.y, stepSizeWorld);

	// careful: A x B in OpenGL is cross(B, A)
	fNormal_WS = normalize(cross(toTop, toRight));
	fLightRay_WS = light0[0].xyz - pos_WS;
	fViewRay_WS = camPosition_WS - pos_WS;

	gl_Position = viewProjectionMatrix * vec4(pos_WS, 1);
}
